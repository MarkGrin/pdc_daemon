\documentclass[14pt]{extarticle}
\usepackage{amsmath}
\usepackage[russian]{babel}
\usepackage[left=15mm,right=15mm,top=20mm,bottom=20mm]{geometry}
\title{Проекта Предиктивное уведомление клиентов boost::beast}
\date{2019-12-11}
\author{Мельников Лев Александрович СКБ 161}
\begin{document}
\maketitle

\section{Используемые понятия}
\begin{itemize}
    \item Уведомление клиентов - мероприятие в котором, ограниченное число операторов
        совершают звонки большому числу клиентов

    \item Метод уведомления клиентов - набор правил, согласно которым определяется стратегия
        уведомления клиентов

    \item Прогрессивный метод уведомления клиентов - метод, по которому новый звонок
        совершается, только если количество свободных операторов больше чем
        количество вызовов, ожидающих ответа клиента
        
    \item Брошенный вызов - звонок, который был принят клиентом, но не был
        отвечен оператором

    \item Предиктивный метод уведомления клиентов - метод согласно, которому новые звонки
        могут совершаться, даже если свободных операторов меньше чем вызовов,
        ожидающих ответа. Предиктивные методы с помощью предсказаний минимизируют
        количество
        брошенных вызовов

    \item АТС - Автоматическая телефонная станция
    \item ВАТС - Виртуальная АТС
\end{itemize}

\section{Постановка задачи}
Разработать программу для управления уведомлением клиентов по прогрессивному методу.
Программа должна работать по протоколоу http и поддерживать следующие методы.
\begin{itemize}
    \item begin - создать сессию обзвона. Параметр session - название сессии.
        Дополнительный параметр stat\_size -
        размер статистики, которую будет принимать эта сессия.
    \item end - удалить сессию. Параметр session - название сессии.
    \item add - добавить в статистику сессии вызов. Параметр session - название
        сессии. setup - время до поднятия трубки. talk - время разговора.
    \item get - Получить количество вызовов, которое нужно совершить
        для максимальной эффективности. Параметр session - название сессии.
        free - количество свободных операторов. incoming - количество вызовов,
        которые еще не приняты.
\end{itemize}

Реализация должна в методе get содержать механизм для рассчета по прогрессивному методу,
но быть легко расширяемой на предиктивный метод. Реализация также должна
иметь возможность обрабатывать несколько сессий одновременно.

\section{Обзор технологии}
В реализации используется boost::asio и boost::beast::http. boost::asio
используется для многопоточной ассинхронной обработки запросов.
Функция accept принимает соединение(здесь и далее асинхронно)
и в обработчике новго соединения создает объект
класса worker, выделяя его в динамическую память. После этого обработчик заново
вызвает функцию accept. Таким образом достигается непрерывное и ассинхронное
принятие соединений. Объект класса worker - в конструкторе создает shared\_ptr,
ссылающийся на себя. И далее начинает обрабатывать соединение. Полученные
данные передаются для обработки в объект класса session\_manager - в котором,
реализована логика обзвона. После того как запрос обработан и ответ отправлен
(а также в случае ошибки и невозможности обработать запрос),
shared\_ptr зануляется, что приводит к освобождению памяти выделенной под
worker.

\section{Использование boost::beast}
Из boost::beast::http используются parser и request(response). В parser делегируется
работа по обработке http запроса, он передается
в качестве аргумента в функцию async\_read. request(response) используются для
чтения(составления) запроса(ответа) в удобном виде.

\section{Трудности в разработке}
Узким местом в производительности являются блокировки общих данных,
а особенно блокировки в методе get, тк он может требовать времени сильно больше
чем вся остальная часть программы. Было предложено следующее решение. В реализации
есть хранилище сессий и его мьютекс - storage\_lock. У каждой сессии есть свой
мьютекс. Порядок захвата мьютексов определен следующим образом:
\begin{enumerate}
    \item begin
        \begin{enumerate}
            \item master(lock)
            \item Добавление сессии в storage(Быстрая операция)
            \item master(unlock)
        \end{enumerate}
    \item add
        \begin{enumerate}
            \item master(lock)
            \item Поиск нужной сессии(Быстрая операция)
            \item session(lock)
            \item master(unlock)
            \item Добавление статистики(Быстрая операция)
            \item session(unlock)
        \end{enumerate}
    \item get
        \begin{enumerate}
            \item master(lock)
            \item Поиск нужной сессии(Быстрая операция)
            \item session(lock)
            \item master(unlock)
            \item Предиктивный метод(Медленная операция операция)
            \item session(unlock)
        \end{enumerate}
    \item end
        \begin{enumerate}
            \item master(lock)
            \item Поиск нужной сессии(Быстрая операция)
            \item session(lock)
            \item session(unlock)
            \item Удаление сесси(Быстрая операция)
            \item master(unlock)
        \end{enumerate}
\end{enumerate}

Блокировке 4(c) - 4(d) нужны, чтобы убедиться, что мьютексом сессии никто не
владеет. Так как порядок захвата мьютексов одинаковый - deadlock невозможен.

\section{Материалы}
Ссылка на репозиторий: https://github.com/markgrin/pdc\_daemon
. В коде также присутствует документация, которая не приведена здесь. Также
в репозитории есть файл test.py для тестирования работоспособности программы.

\end{document}
